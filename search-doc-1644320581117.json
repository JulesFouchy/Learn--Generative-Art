[{"title":"Introduction","type":0,"sectionRef":"#","url":"lessons/","content":"","keywords":""},{"title":"Forewords​","type":1,"pageTitle":"Introduction","url":"lessons/#forewords","content":"Welcome to this class! We will only assume some very basic knowledge of javascript and will teach you how to create amazing artworks and animations through code and maths. We will be using a javascript library called p5 that allows us to do drawing easily. It is designed to be very beginner friendly, and is also quite powerful. "},{"title":"Installation​","type":1,"pageTitle":"Introduction","url":"lessons/#installation","content":"I have an amazing template ready for you and I would highly recommend you use it: Download Download the template and check out the ReadMe to install everything! https://github.com/JulesFouchy/p5Template  (NB: I also have a template for using shaders inside p5 ; we might talk about this later) "},{"title":"Documentation​","type":1,"pageTitle":"Introduction","url":"lessons/#documentation","content":"p5 has a wonderful website with tons of examples and a really nice documentation ; check it out whenever you are looking for something! https://p5js.org/reference "},{"title":"Give me feedback​","type":1,"pageTitle":"Introduction","url":"lessons/#give-me-feedback","content":"I tried my best to deliver the best learning experience possible. I am still a novice teacher though (and even if I were experienced, one never runs out of things to learn anyways). So your feedback is more than welcome and I will happily improve my classes with your help! To do so, feel free to reach out to me directly or raise an issue on GitHub. "},{"title":"AI","type":0,"sectionRef":"#","url":"lessons/ai/","content":"AI GAN: Growing mountain Magenta, js library for music and image with AI ml5, js library for image with AI Runway, interface and js library for image with AI Art Breeder, interface to generate images with AI Disco Fusion","keywords":""},{"title":"parametric-coordinates","type":0,"sectionRef":"#","url":"lessons/Generative Techniques/parametric-coordinates/","content":"parametric-coordinates","keywords":""},{"title":"physics","type":0,"sectionRef":"#","url":"lessons/Generative Techniques/physics/","content":"physics","keywords":""},{"title":"perlin-noise","type":0,"sectionRef":"#","url":"lessons/Generative Techniques/perlin-noise/","content":"perlin-noise","keywords":""},{"title":"shaders","type":0,"sectionRef":"#","url":"lessons/Generative Techniques/shaders/","content":"shaders","keywords":""},{"title":"recursivity","type":0,"sectionRef":"#","url":"lessons/Generative Techniques/recursivity/","content":"recursivity https://youtu.be/0jjeOYMjmDU?list=PLRqwX-V7Uu6ZiZxtDDRCi6uhfTH4FilpH","keywords":""},{"title":"transforms","type":0,"sectionRef":"#","url":"lessons/Generative Techniques/transforms/","content":"transforms If you want to rotate a square, you will need to start learning about transforms.","keywords":""},{"title":"the-0-to-1-interval-is-your-best-friend","type":0,"sectionRef":"#","url":"lessons/Generative Techniques/the-0-to-1-interval-is-your-best-friend/","content":"the-0-to-1-interval-is-your-best-friend","keywords":""},{"title":"About Git","type":0,"sectionRef":"#","url":"lessons/The Basics/about-git/","content":"About Git","keywords":""},{"title":"About Typescript","type":0,"sectionRef":"#","url":"lessons/The Basics/about-typescript/","content":"","keywords":""},{"title":"How do you use types in Typescript?​","type":1,"pageTitle":"About Typescript","url":"lessons/The Basics/about-typescript/#how-do-you-use-types-in-typescript","content":"You can (optionally) specify a type after a variable, by using a colon: const x: number. It is very useful to specify the types expected by a function: function doSomething(x: number, y: number, title: string): number { // . . . } Copy The above function takes two numbers and a string, and returns a number. tip Having precise type definitions allows your IDE to give you much better errors and warnings, and it makes your life a lot easier! If you still want the possibility for a variable to have multiple types, you can use a union: const x: number | string Copy If you want optional arguments, declare them with a ?: function doSomething(x: number, y: number, title?: string): number { // . . . } Copy Here title is an optional parameter. Going further Typescript has many more nice features: enums, better classes, objects with well-defined fields (called interface) etc. Check this out if you want to know more: Typescript Handbook "},{"title":"How do you use Javascript?​","type":1,"pageTitle":"About Typescript","url":"lessons/The Basics/about-typescript/#how-do-you-use-javascript","content":"We won't need much knowledge of Javascript for this class. The only thing I want you to remember is the proper way of declaring variables: tip Use const, or let. const x = 10 Copy A variable declared with const cannot be changed afterwards. It is a good practice to try using const as often as possible. let x = 10 Copy If you need a mutable variable, then it is perfectly fine to declare it with let. And please, forget var. It is the old way of declaring variables and it can have confusing behaviour, so we introduced const and let in the language to replace var. Never ever use var again. Good to know In Javascript the semicolons at the end of every line are not required. It is only a stylistic choice and I'll let you decide which convention you prefer. "},{"title":"Exercises: Loops","type":0,"sectionRef":"#","url":"lessons/The Basics/exercises-loops/","content":"","keywords":""},{"title":"Many rectangles​","type":1,"pageTitle":"Exercises: Loops","url":"lessons/The Basics/exercises-loops/#many-rectangles","content":"Draw 100 rectangles. Lay them out as you want.  Example result Example solution   Bonus constraints Play with the alpha value (transparency) or with the Blend Mode to make it more interesting when rectangles overlap. Example result Example solution  "},{"title":"Random positions​","type":1,"pageTitle":"Exercises: Loops","url":"lessons/The Basics/exercises-loops/#random-positions","content":"Draw 100 ellipses. Try to have more of them near the center of the canvas.  Example result Example solution   Bonus constraints Find several ways of having them concentrated near the center. I can think of at least 3 different ways of achieving this result. "},{"title":"Rosace​","type":1,"pageTitle":"Exercises: Loops","url":"lessons/The Basics/exercises-loops/#rosace","content":"Draw a rosace.  Example result Example solution   Bonus constraints How to colorize the rosace? Example result Example solution and its fragment shader "},{"title":"Chessboard​","type":1,"pageTitle":"Exercises: Loops","url":"lessons/The Basics/exercises-loops/#chessboard","content":"Make a chessboard pattern.  Example result Step-by-step help and solution   Bonus constraints Can you generalize to any number of grid cells?Can you think of another tiling pattern? Using three colors instead of two for example.Can you do it in less than 10 lines of code? Less than 5? Avoid accumulative variables (compute everything based on the current loop indices instead of having global variables that change from one loop iteration to the next)Use one loop instead of two Solution in 10 lines Solution in 5 lines "},{"title":"Custom circle​","type":1,"pageTitle":"Exercises: Loops","url":"lessons/The Basics/exercises-loops/#custom-circle","content":"Draw a circle, but do it by placing each vertex &quot;by hand&quot; using a shape Example result Example solution  Bonus constraints Now that you drew the circle yourself, you have more control and you can alter it! Add a small random offset to each vertex to create a distorted circle (See Method 0 of the example)Add an offset based on the angle of the current vertex to make continuous effects (See Methods 1 and 2 of the example) Example result Example solution  "},{"title":"setup and draw","type":0,"sectionRef":"#","url":"lessons/The Basics/setup-and-draw/","content":"","keywords":""},{"title":"setup​","type":1,"pageTitle":"setup and draw","url":"lessons/The Basics/setup-and-draw/#setup","content":"tip setup will be called once at the start of your programm: this is where you choose the size of your canvas, initialize variables etc. If you are using my template you don't need to worry about choosing a size: it is done automatically, the default being a square that fills the window with a 25px margin. (You can change this by modifying the __desiredCanvasWidth and __desiredCanvasHeight functions inside src/p6/chooseCanvasSize.ts). The nice thing about specifying the size the way I did is that when the window resizes, the canvas is adapted automatically. "},{"title":"draw​","type":1,"pageTitle":"setup and draw","url":"lessons/The Basics/setup-and-draw/#draw","content":"tip draw will be called over and over, 60 times a second. This is where you put your drawing and animation code. With that said, let's start drawing! "},{"title":"First Drawings","type":0,"sectionRef":"#","url":"lessons/The Basics/first-drawings/","content":"","keywords":""},{"title":"width and height​","type":1,"pageTitle":"First Drawings","url":"lessons/The Basics/first-drawings/#width-and-height","content":"width and height are built-in variables that allow you to access the size of the sketch at any time. You will see me use them all the time, and you should really be using them to position your shapes relatively inside the canvas. For example (width/2, height/2) corresponds to the center of the canvas. "},{"title":"The coordinate system​","type":1,"pageTitle":"First Drawings","url":"lessons/The Basics/first-drawings/#the-coordinate-system","content":"tip Important to note: the y-axis is pointing down! (0, 0) is the top-left of the canvas. If you prefer having (0, 0) as the center of the canvas, you can do translate(width/2, height/2) before your start drawing. And to make the y-axis point up, also add scale(1, -1) //translate(width/2, height/2) //scale(1, -1) ellipse(100, 100, 20) // ------- // Draw the axes // ------- noFill() strokeWeight(2) // x-axis stroke(&amp;quot;red&amp;quot;) line(-width, 0, width, 0) triangle(width/2, 0, width/2 - 10, 10, width/2 - 10, -10) // y-axis stroke(&amp;quot;green&amp;quot;) line(0, -height, 0, height) triangle(0, height/2, 10 , height/2 - 10, -10, height/2 - 10) "},{"title":"Shapes​","type":1,"pageTitle":"First Drawings","url":"lessons/The Basics/first-drawings/#shapes","content":"p5 knows how to draw quite a few shapes! We will take a look at the most common ones here but remember that you can find them all at https://p5js.org/reference/. "},{"title":"ellipse​","type":1,"pageTitle":"First Drawings","url":"lessons/The Basics/first-drawings/#ellipse","content":"Ellipses are circles that can be wider in one direction (just like rectangles are squares that can be wider in one direction). We specify them by giving the center x and y, and then the diameter (or two diameters if we want to have different sizes along the x and y axes). ellipse( width/2, // center (x coordinate) height/2, // center (y coordinate) 100, // diameter along the x-axis 50 // diameter along the y-axis ) ellipse( width/2, // center (x coordinate) height*0.75, // center (y coordinate) 100 // diameter ) "},{"title":"rect​","type":1,"pageTitle":"First Drawings","url":"lessons/The Basics/first-drawings/#rect","content":"Rectangles use almost the same parameters as Ellipses. The big difference though is that the first two parameters are (by default) the coordinates of the top-left corner, not the center! (You can change this with the rectMode function) // rectMode(CENTER) rect( width/2, // top-left corner (x coordinate) (or center if you used rectMode(CENTER)) height/2, // top-left corner (y coordinate) (or center if you used rectMode(CENTER)) 100, // size along the x-axis 50 // size along the y-axis ) rect( width/2, // top-left corner (x coordinate) (or center if you used rectMode(CENTER)) height*0.75, // top-left corner (y coordinate) (or center if you used rectMode(CENTER)) 100 // size ) "},{"title":"Colors​","type":1,"pageTitle":"First Drawings","url":"lessons/The Basics/first-drawings/#colors","content":"tip fill(...) is used to color the inside of the shape, and stroke(...) is used for its boundary. If you don't want any stroke, you can remove it by calling noStroke(). And you can remove the fill by calling noFill(). The default way of specifing a color is by giving its RGB values. For example fill(255, 145, 23) will give some nice orange. (You can make so that fill uses HSB or HSL values instead of RGB with the colorMode function). You can also use an hexadecimal string like &quot;#FF9117&quot; or a CSS color name like &quot;orange&quot;. Note that the colors you specify remain until you change them. So for example this will draw both the ellipse and the rectangle in orange: // Choose an orange color and no stroke fill( 255, // Red (between 0 and 255) 145, // Green (between 0 and 255) 23 // Blue (between 0 and 255) ) // fill(&amp;quot;#FF9117&amp;quot;) noStroke() // Draw some shapes ellipse(100, 100, 50) rect(200, 200, 100) The last (important) one in the family is strokeWeight(...). It controls the thickness of the stroke, which is also the size of points and lines. It has a value of 1 by default. strokeWeight(10) ellipse(width/2, height/2, 100) point(width/2, height/2) strokeWeight(50) line(100, height*0.8, width-100, height*0.8) strokeWeight(1) // Back to default line(100, height*0.3, width-100, height*0.3) "},{"title":"Exercises​","type":1,"pageTitle":"First Drawings","url":"lessons/The Basics/first-drawings/#exercises","content":"Exercises Draw a house Example result Example solution Draw Mickey Mouse's face Example result Example solution Draw a face Example result Example solution  "},{"title":"Useful Functions","type":0,"sectionRef":"#","url":"lessons/The Basics/useful-functions/","content":"","keywords":""},{"title":"random​","type":1,"pageTitle":"Useful Functions","url":"lessons/The Basics/useful-functions/#random","content":"Returns a random number inside a given interval ellipse( random(0, width), // Center x, a random number between 0 and width random(0, height), // Center y, a random number between 0 and height 100 // Diameter )   It can also give you a random element from a list: const colorsList = [&amp;quot;#4287f5&amp;quot;, &amp;quot;#f0243f&amp;quot;, &amp;quot;#94f268&amp;quot;] const myColor = random(colorsList) // Pick a random color from the list fill(myColor) ellipse(width/2, height/2, 100) "},{"title":"lerp and lerpColor​","type":1,"pageTitle":"Useful Functions","url":"lessons/The Basics/useful-functions/#lerp-and-lerpcolor","content":"This is basically what allows you to make gradients: for (let t = 0; t &amp;lt; 1; t += 0.1) { const diameter = lerp( 20, // start 150, // end t // progression percentage (between 0 and 1) ) const col = lerpColor(color(&amp;quot;#FFC003&amp;quot;), color(&amp;quot;#6D32ED&amp;quot;), t) const x = lerp(10, width - 100, t) fill(col) noStroke() ellipse(x, height/2, diameter) } "},{"title":"p5.Vector​","type":1,"pageTitle":"Useful Functions","url":"lessons/The Basics/useful-functions/#p5vector","content":"A p5.Vector is a type that holds two (or three) coordinates : x, y and z. It has a lot of useful methods like getting its length or direction, and you can do math operations with them. PS: check the documentation! One nice thing in particular is that you can create them from an angle: translate(width/2, height/2) // put (0, 0) in the center of the canvas because the vectors will be distributed around (0, 0) for (let angle = 0; angle &amp;lt; TWO_PI; angle += TWO_PI / 6) { const p = p5.Vector.fromAngle(angle).mult(100) // Vector of length 100 pointing in the direction of angle ellipse(p.x, p.y, 50) } "},{"title":"Transforms: translate, rotate and scale​","type":1,"pageTitle":"Useful Functions","url":"lessons/The Basics/useful-functions/#transforms-translate-rotate-and-scale","content":"When you start doing more complex things, keeping track of all the relative coordinates can get very annoying: transforms can help you handle that very nicely! Also, some things like drawing a square rotated by 45° cannot be done except with transforms! tip Here is a nice tutorial about transforms. It is using Processing and not p5, but the functions are exactly the same! (except that pushMatrix() is called push() in p5, and popMatrix() is called pop(). "}]